#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Spyder Editor

Restructered on Wed 10 Nov 2020 14:15

@author: Laurens Stoop - l.p.stoop@uu.nl
"""


#%%
# =============================================================================
# Dependencies
# =============================================================================


# Importing modules
import xarray as xr
import numpy as np
import datetime
import os.path


# Set the distribution
distribution='Zuijlen'
dataset='ERA5'

# File locations
path_source = '/media/DataGate3/'+dataset+'-EU_CF/'
path_distribution = '/media/DataDrive/Other/CapacityDistribution/'+distribution+'/'+dataset+'/'
path_save = '/media/DataGate3/'+dataset+'-EU_EV-'+distribution+'/'



# Select the years to run
years = np.array([
            '1950', '1951', '1952',
            '1953', '1954', '1955',
            '1956', '1957', '1958',
            '1959', '1960', '1961',
            '1962', '1963', '1964',
            '1965', '1966', '1967',
            '1968', '1969', '1970',
            '1971', '1972', '1973',
            '1974', '1975', '1976',
            '1977', '1978'
            '1979', '1980', '1981',
            '1982', '1983', '1984',
            '1985', '1986', '1987',
            '1988', '1989', '1990',
            '1991', '1992', '1993',
            '1994', '1995', '1996',
            '1997', '1998', '1999',
            '2000', '2001', '2002',
            '2003', '2004', '2005',
            '2006', '2007', '2008',
            '2009', '2010', '2011',
            '2012', '2013', '2014',
            '2015', '2016', '2017',
            '2018', '2019'
        ])



print('NOTIFY: Basic setup done, defining functions')
#%%
# =============================================================================
# Function definitions
# =============================================================================


# before we start he main loop, we open the distribution file
ds_distribution = xr.open_mfdataset(path_distribution+'CapacityDistribution-'+distribution+'_'+dataset+'_*.nc')

# Force load the file for later
ds_distribution.load()


# Run over the years
for year in years:
        
        # Define the file name
        file_source = path_source+dataset+'-EU_CF_'+year+'.nc'
        file_save = path_save+dataset+'-EU_EV-'+distribution+'_'+year+'.nc'
        

        # Check if source file exist to allow for easy redo
        if os.path.isfile(file_source) == False:
            
            # Tell us the file exist
            print('NOTIFY: The source file does not exist for year '+year+'!')
            
            
        # Check if file allready exist, then get out
        elif os.path.isfile(file_save) == True:
            
            # Tell us the file exist
            print('NOTIFY: Allready applied the '+distribution+' distribution for year '+year+'!')
          
            
        # IF the file doesn't exist, apply the distribution
        elif os.path.isfile(file_save) == False:
            
            # Tell us the file exist
            print('NOTIFY: Now starting work on applying '+distribution+' distribution for year '+year+'!')
            
            # open the source file
            with xr.open_dataset(file_source) as ds:
                # Open a new dataset
                with xr.Dataset() as ds2:
                
                    
                    print('action (0/2): Apply the distributions')                        
                    # Now apply the distributions            
                    ds2['SPV'] = ds.solarCF * ds_distribution.solarPV
                    ds2['WON'] = ds.windCF_on * ds_distribution.onWind
                    ds2['WOF'] = ds.windCF_off * ds_distribution.offWind
                    
                    print('action (1/2): Force load the new file to do the calculations')
                    # Force load the file
                    ds2.load()

                    # Set the demand attributes
                    ds2.SPV.attrs.update(
                            units = 'MWh',
                            short_name = 'SPV',
                            long_name = 'Solar PhotoVoltaic',
                            method = 'Adopted by L.P. Stoop, based on Bett and Thornton, 2016', 
                            distribution = 'The distribution of SPV comes from '+distribution,
                            description = 'Hourly generation of solar panels')
                
                    # Set the demand attributes
                    ds2.WON.attrs.update(
                            units = 'MWh',
                            short_name = 'WON',
                            description = 'Energy generated by onshore wind turbines with hubheigh 98 meter',
                            method = 'Power curve adaptation by L.P. Stoop', 
                            distribution = 'The distribution of SPV comes from '+distribution,
                            long_name = 'Wind onshore')
                    
                    # Set the demand attributes
                    ds2.WOF.attrs.update(
                            units = 'MWh',
                            short_name = 'WOF',
                            description = 'Energy generated by offshore wind turbines with hubheigh 122 meter',
                            method = 'Power curve adaptation by L.P. Stoop', 
                            distribution = 'The distribution of SPV comes from '+distribution,
                            long_name = 'Wind offshore')
                    
                    # attempt to use less data - This keeps precision as data was float 32
                    ds2['SPV'] = ds2.SPV.astype('float32')
                    ds2['WON'] = ds2.WON.astype('float32')
                    ds2['WOF'] = ds2.WOF.astype('float32')
                    
    
                    print('action (2/2): Save the file')
                    # Now save the file
                    #compression = 'zlib' # zlib is very smoll data
                    ds2.to_netcdf(file_save, format='NETCDF4', engine='netcdf4') # ,encoding={'SPV':{compression:True},'WON':{compression:True},'WOF':{compression:True}})
            
            
            
  